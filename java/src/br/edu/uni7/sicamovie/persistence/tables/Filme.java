/*
 * This file is generated by jOOQ.
 */
package br.edu.uni7.sicamovie.persistence.tables;


import br.edu.uni7.sicamovie.persistence.BdSicaMovie;
import br.edu.uni7.sicamovie.persistence.Indexes;
import br.edu.uni7.sicamovie.persistence.Keys;
import br.edu.uni7.sicamovie.persistence.tables.records.FilmeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Filme extends TableImpl<FilmeRecord> {

    private static final long serialVersionUID = -1146561932;

    /**
     * The reference instance of <code>bd_sica_movie.filme</code>
     */
    public static final Filme FILME = new Filme();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmeRecord> getRecordType() {
        return FilmeRecord.class;
    }

    /**
     * The column <code>bd_sica_movie.filme.id</code>.
     */
    public final TableField<FilmeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>bd_sica_movie.filme.nome_pt</code>.
     */
    public final TableField<FilmeRecord, String> NOME_PT = createField(DSL.name("nome_pt"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.filme.nome_or</code>.
     */
    public final TableField<FilmeRecord, String> NOME_OR = createField(DSL.name("nome_or"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>bd_sica_movie.filme.ano_lancamento</code>.
     */
    public final TableField<FilmeRecord, String> ANO_LANCAMENTO = createField(DSL.name("ano_lancamento"), org.jooq.impl.SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.filme.sinopse</code>.
     */
    public final TableField<FilmeRecord, String> SINOPSE = createField(DSL.name("sinopse"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.filme.diretor_id</code>.
     */
    public final TableField<FilmeRecord, Integer> DIRETOR_ID = createField(DSL.name("diretor_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.filme.tipo_id</code>.
     */
    public final TableField<FilmeRecord, Integer> TIPO_ID = createField(DSL.name("tipo_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bd_sica_movie.filme</code> table reference
     */
    public Filme() {
        this(DSL.name("filme"), null);
    }

    /**
     * Create an aliased <code>bd_sica_movie.filme</code> table reference
     */
    public Filme(String alias) {
        this(DSL.name(alias), FILME);
    }

    /**
     * Create an aliased <code>bd_sica_movie.filme</code> table reference
     */
    public Filme(Name alias) {
        this(alias, FILME);
    }

    private Filme(Name alias, Table<FilmeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Filme(Name alias, Table<FilmeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Filme(Table<O> child, ForeignKey<O, FilmeRecord> key) {
        super(child, key, FILME);
    }

    @Override
    public Schema getSchema() {
        return BdSicaMovie.BD_SICA_MOVIE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FILME_FK_FILME_DIRETOR_ID, Indexes.FILME_FK_FILME_TIPO_ID, Indexes.FILME_PRIMARY);
    }

    @Override
    public Identity<FilmeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FILME;
    }

    @Override
    public UniqueKey<FilmeRecord> getPrimaryKey() {
        return Keys.KEY_FILME_PRIMARY;
    }

    @Override
    public List<UniqueKey<FilmeRecord>> getKeys() {
        return Arrays.<UniqueKey<FilmeRecord>>asList(Keys.KEY_FILME_PRIMARY);
    }

    @Override
    public List<ForeignKey<FilmeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FilmeRecord, ?>>asList(Keys.FK_FILME_DIRETOR_ID, Keys.FK_FILME_TIPO_ID);
    }

    public Diretor diretor() {
        return new Diretor(this, Keys.FK_FILME_DIRETOR_ID);
    }

    public Genero genero() {
        return new Genero(this, Keys.FK_FILME_TIPO_ID);
    }

    @Override
    public Filme as(String alias) {
        return new Filme(DSL.name(alias), this);
    }

    @Override
    public Filme as(Name alias) {
        return new Filme(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Filme rename(String name) {
        return new Filme(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Filme rename(Name name) {
        return new Filme(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
