/*
 * This file is generated by jOOQ.
 */
package br.edu.uni7.sicamovie.persistence.tables;


import br.edu.uni7.sicamovie.persistence.BdSicaMovie;
import br.edu.uni7.sicamovie.persistence.Indexes;
import br.edu.uni7.sicamovie.persistence.Keys;
import br.edu.uni7.sicamovie.persistence.tables.records.FuncionarioRecord;

import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Funcionario extends TableImpl<FuncionarioRecord> {

    private static final long serialVersionUID = -1382258515;

    /**
     * The reference instance of <code>bd_sica_movie.funcionario</code>
     */
    public static final Funcionario FUNCIONARIO = new Funcionario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FuncionarioRecord> getRecordType() {
        return FuncionarioRecord.class;
    }

    /**
     * The column <code>bd_sica_movie.funcionario.id</code>.
     */
    public final TableField<FuncionarioRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>bd_sica_movie.funcionario.matricula</code>.
     */
    public final TableField<FuncionarioRecord, String> MATRICULA = createField(DSL.name("matricula"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.funcionario.nome</code>.
     */
    public final TableField<FuncionarioRecord, String> NOME = createField(DSL.name("nome"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.funcionario.data_admissao</code>.
     */
    public final TableField<FuncionarioRecord, Date> DATA_ADMISSAO = createField(DSL.name("data_admissao"), org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.funcionario.salario</code>.
     */
    public final TableField<FuncionarioRecord, BigDecimal> SALARIO = createField(DSL.name("salario"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.funcionario.funcao_id</code>.
     */
    public final TableField<FuncionarioRecord, Integer> FUNCAO_ID = createField(DSL.name("funcao_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.funcionario.localizacao_id</code>.
     */
    public final TableField<FuncionarioRecord, Integer> LOCALIZACAO_ID = createField(DSL.name("localizacao_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bd_sica_movie.funcionario</code> table reference
     */
    public Funcionario() {
        this(DSL.name("funcionario"), null);
    }

    /**
     * Create an aliased <code>bd_sica_movie.funcionario</code> table reference
     */
    public Funcionario(String alias) {
        this(DSL.name(alias), FUNCIONARIO);
    }

    /**
     * Create an aliased <code>bd_sica_movie.funcionario</code> table reference
     */
    public Funcionario(Name alias) {
        this(alias, FUNCIONARIO);
    }

    private Funcionario(Name alias, Table<FuncionarioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Funcionario(Name alias, Table<FuncionarioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Funcionario(Table<O> child, ForeignKey<O, FuncionarioRecord> key) {
        super(child, key, FUNCIONARIO);
    }

    @Override
    public Schema getSchema() {
        return BdSicaMovie.BD_SICA_MOVIE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FUNCIONARIO_FK_FUNCIONARIO_FUNCAO_ID, Indexes.FUNCIONARIO_FK_FUNCIONARIO_LOCALIZACAO_ID, Indexes.FUNCIONARIO_PRIMARY, Indexes.FUNCIONARIO_UQ_FUNCIONARIO_MATRICULA);
    }

    @Override
    public Identity<FuncionarioRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FUNCIONARIO;
    }

    @Override
    public UniqueKey<FuncionarioRecord> getPrimaryKey() {
        return Keys.KEY_FUNCIONARIO_PRIMARY;
    }

    @Override
    public List<UniqueKey<FuncionarioRecord>> getKeys() {
        return Arrays.<UniqueKey<FuncionarioRecord>>asList(Keys.KEY_FUNCIONARIO_PRIMARY, Keys.KEY_FUNCIONARIO_UQ_FUNCIONARIO_MATRICULA);
    }

    @Override
    public List<ForeignKey<FuncionarioRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FuncionarioRecord, ?>>asList(Keys.FK_FUNCIONARIO_FUNCAO_ID, Keys.FK_FUNCIONARIO_LOCALIZACAO_ID);
    }

    public Funcao funcao() {
        return new Funcao(this, Keys.FK_FUNCIONARIO_FUNCAO_ID);
    }

    public Localizacao localizacao() {
        return new Localizacao(this, Keys.FK_FUNCIONARIO_LOCALIZACAO_ID);
    }

    @Override
    public Funcionario as(String alias) {
        return new Funcionario(DSL.name(alias), this);
    }

    @Override
    public Funcionario as(Name alias) {
        return new Funcionario(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Funcionario rename(String name) {
        return new Funcionario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Funcionario rename(Name name) {
        return new Funcionario(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Date, BigDecimal, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
