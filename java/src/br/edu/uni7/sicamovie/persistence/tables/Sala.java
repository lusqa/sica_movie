/*
 * This file is generated by jOOQ.
 */
package br.edu.uni7.sicamovie.persistence.tables;


import br.edu.uni7.sicamovie.persistence.BdSicaMovie;
import br.edu.uni7.sicamovie.persistence.Indexes;
import br.edu.uni7.sicamovie.persistence.Keys;
import br.edu.uni7.sicamovie.persistence.tables.records.SalaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sala extends TableImpl<SalaRecord> {

    private static final long serialVersionUID = 1966388312;

    /**
     * The reference instance of <code>bd_sica_movie.sala</code>
     */
    public static final Sala SALA = new Sala();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalaRecord> getRecordType() {
        return SalaRecord.class;
    }

    /**
     * The column <code>bd_sica_movie.sala.id</code>.
     */
    public final TableField<SalaRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>bd_sica_movie.sala.nome</code>.
     */
    public final TableField<SalaRecord, String> NOME = createField(DSL.name("nome"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.sala.capacidade</code>.
     */
    public final TableField<SalaRecord, Integer> CAPACIDADE = createField(DSL.name("capacidade"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bd_sica_movie.sala.localizacao_id</code>.
     */
    public final TableField<SalaRecord, Integer> LOCALIZACAO_ID = createField(DSL.name("localizacao_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>bd_sica_movie.sala</code> table reference
     */
    public Sala() {
        this(DSL.name("sala"), null);
    }

    /**
     * Create an aliased <code>bd_sica_movie.sala</code> table reference
     */
    public Sala(String alias) {
        this(DSL.name(alias), SALA);
    }

    /**
     * Create an aliased <code>bd_sica_movie.sala</code> table reference
     */
    public Sala(Name alias) {
        this(alias, SALA);
    }

    private Sala(Name alias, Table<SalaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sala(Name alias, Table<SalaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Sala(Table<O> child, ForeignKey<O, SalaRecord> key) {
        super(child, key, SALA);
    }

    @Override
    public Schema getSchema() {
        return BdSicaMovie.BD_SICA_MOVIE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SALA_FK_SALA_LOCALIZACAO_ID, Indexes.SALA_PRIMARY);
    }

    @Override
    public Identity<SalaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SALA;
    }

    @Override
    public UniqueKey<SalaRecord> getPrimaryKey() {
        return Keys.KEY_SALA_PRIMARY;
    }

    @Override
    public List<UniqueKey<SalaRecord>> getKeys() {
        return Arrays.<UniqueKey<SalaRecord>>asList(Keys.KEY_SALA_PRIMARY);
    }

    @Override
    public List<ForeignKey<SalaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SalaRecord, ?>>asList(Keys.FK_SALA_LOCALIZACAO_ID);
    }

    public Localizacao localizacao() {
        return new Localizacao(this, Keys.FK_SALA_LOCALIZACAO_ID);
    }

    @Override
    public Sala as(String alias) {
        return new Sala(DSL.name(alias), this);
    }

    @Override
    public Sala as(Name alias) {
        return new Sala(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sala rename(String name) {
        return new Sala(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sala rename(Name name) {
        return new Sala(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
